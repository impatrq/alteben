
Diaplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000007e6  0000087a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080011c  0080011c  00000896  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f4a  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099f  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f9  00000000  00000000  000022b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e4  00000000  00000000  00002d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000691  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000038c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
  9e:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8b b9       	out	0x0b, r24	; 11
  ac:	00 c0       	rjmp	.+0      	; 0xae <toggle_e+0x8>
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	08 95       	ret

000000b6 <lcd_write>:
  b6:	cf 93       	push	r28
  b8:	c8 2f       	mov	r28, r24
  ba:	66 23       	and	r22, r22
  bc:	21 f0       	breq	.+8      	; 0xc6 <lcd_write+0x10>
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_write+0x16>
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	8d 7f       	andi	r24, 0xFD	; 253
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x56>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x60>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x6a>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x74>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x9a>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0xa4>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xae>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb8>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd_read>:
 18e:	88 23       	and	r24, r24
 190:	21 f0       	breq	.+8      	; 0x19a <lcd_read+0xc>
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	81 60       	ori	r24, 0x01	; 1
 196:	8b b9       	out	0x0b, r24	; 11
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <lcd_read+0x12>
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	8b b9       	out	0x0b, r24	; 11
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	8a b1       	in	r24, 0x0a	; 10
 1a8:	8f 7e       	andi	r24, 0xEF	; 239
 1aa:	8a b9       	out	0x0a, r24	; 10
 1ac:	8a b1       	in	r24, 0x0a	; 10
 1ae:	8f 7d       	andi	r24, 0xDF	; 223
 1b0:	8a b9       	out	0x0a, r24	; 10
 1b2:	8a b1       	in	r24, 0x0a	; 10
 1b4:	8f 7b       	andi	r24, 0xBF	; 191
 1b6:	8a b9       	out	0x0a, r24	; 10
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	8f 77       	andi	r24, 0x7F	; 127
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	84 60       	ori	r24, 0x04	; 4
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_read+0x38>
 1c6:	4c 99       	sbic	0x09, 4	; 9
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <lcd_read+0x40>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <lcd_read+0x42>
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	4d 99       	sbic	0x09, 5	; 9
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	4e 99       	sbic	0x09, 6	; 9
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	4f 99       	sbic	0x09, 7	; 9
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	9b b1       	in	r25, 0x0b	; 11
 1de:	9b 7f       	andi	r25, 0xFB	; 251
 1e0:	9b b9       	out	0x0b, r25	; 11
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_read+0x56>
 1e4:	9b b1       	in	r25, 0x0b	; 11
 1e6:	94 60       	ori	r25, 0x04	; 4
 1e8:	9b b9       	out	0x0b, r25	; 11
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_read+0x5e>
 1ec:	4c 99       	sbic	0x09, 4	; 9
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	4d 99       	sbic	0x09, 5	; 9
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	4e 99       	sbic	0x09, 6	; 9
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	4f 99       	sbic	0x09, 7	; 9
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	9b b1       	in	r25, 0x0b	; 11
 1fe:	9b 7f       	andi	r25, 0xFB	; 251
 200:	9b b9       	out	0x0b, r25	; 11
 202:	08 95       	ret

00000204 <lcd_waitbusy>:
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_read>
 20a:	88 23       	and	r24, r24
 20c:	dc f3       	brlt	.-10     	; 0x204 <lcd_waitbusy>
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_waitbusy+0xe>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_read>
 21c:	08 95       	ret

0000021e <lcd_command>:
 21e:	cf 93       	push	r28
 220:	c8 2f       	mov	r28, r24
 222:	0e 94 02 01 	call	0x204	; 0x204 <lcd_waitbusy>
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write>
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <lcd_data>:
 232:	cf 93       	push	r28
 234:	c8 2f       	mov	r28, r24
 236:	0e 94 02 01 	call	0x204	; 0x204 <lcd_waitbusy>
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	8c 2f       	mov	r24, r28
 23e:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write>
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <lcd_gotoxy>:
 246:	61 11       	cpse	r22, r1
 248:	04 c0       	rjmp	.+8      	; 0x252 <lcd_gotoxy+0xc>
 24a:	80 58       	subi	r24, 0x80	; 128
 24c:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
 250:	08 95       	ret
 252:	80 54       	subi	r24, 0x40	; 64
 254:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
 258:	08 95       	ret

0000025a <lcd_clrscr>:
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
 260:	08 95       	ret

00000262 <lcd_putc>:
 262:	cf 93       	push	r28
 264:	c8 2f       	mov	r28, r24
 266:	0e 94 02 01 	call	0x204	; 0x204 <lcd_waitbusy>
 26a:	ca 30       	cpi	r28, 0x0A	; 10
 26c:	49 f4       	brne	.+18     	; 0x280 <lcd_putc+0x1e>
 26e:	80 34       	cpi	r24, 0x40	; 64
 270:	10 f4       	brcc	.+4      	; 0x276 <lcd_putc+0x14>
 272:	80 e4       	ldi	r24, 0x40	; 64
 274:	01 c0       	rjmp	.+2      	; 0x278 <lcd_putc+0x16>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	80 58       	subi	r24, 0x80	; 128
 27a:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
 27e:	04 c0       	rjmp	.+8      	; 0x288 <lcd_putc+0x26>
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	8c 2f       	mov	r24, r28
 284:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write>
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <lcd_puts>:
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	fc 01       	movw	r30, r24
 292:	03 c0       	rjmp	.+6      	; 0x29a <lcd_puts+0xe>
 294:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
 298:	fe 01       	movw	r30, r28
 29a:	ef 01       	movw	r28, r30
 29c:	21 96       	adiw	r28, 0x01	; 1
 29e:	80 81       	ld	r24, Z
 2a0:	81 11       	cpse	r24, r1
 2a2:	f8 cf       	rjmp	.-16     	; 0x294 <lcd_puts+0x8>
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 2b2:	8a b1       	in	r24, 0x0a	; 10
 2b4:	81 60       	ori	r24, 0x01	; 1
 2b6:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 2b8:	8a b1       	in	r24, 0x0a	; 10
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 2be:	8a b1       	in	r24, 0x0a	; 10
 2c0:	84 60       	ori	r24, 0x04	; 4
 2c2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2c4:	8a b1       	in	r24, 0x0a	; 10
 2c6:	80 61       	ori	r24, 0x10	; 16
 2c8:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2ca:	8a b1       	in	r24, 0x0a	; 10
 2cc:	80 62       	ori	r24, 0x20	; 32
 2ce:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2d0:	8a b1       	in	r24, 0x0a	; 10
 2d2:	80 64       	ori	r24, 0x40	; 64
 2d4:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2d6:	8a b1       	in	r24, 0x0a	; 10
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	8a b9       	out	0x0a, r24	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	9a ef       	ldi	r25, 0xFA	; 250
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_init+0x36>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 2e4:	8b b1       	in	r24, 0x0b	; 11
 2e6:	80 62       	ori	r24, 0x20	; 32
 2e8:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 2ea:	8b b1       	in	r24, 0x0b	; 11
 2ec:	80 61       	ori	r24, 0x10	; 16
 2ee:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2f0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	9e e4       	ldi	r25, 0x4E	; 78
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd_init+0x4e>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2fc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 300:	c0 e0       	ldi	r28, 0x00	; 0
 302:	d1 e0       	ldi	r29, 0x01	; 1
 304:	ce 01       	movw	r24, r28
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0x5c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 30e:	ce 01       	movw	r24, r28
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <lcd_init+0x66>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 314:	8b b1       	in	r24, 0x0b	; 11
 316:	8f 7e       	andi	r24, 0xEF	; 239
 318:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 31a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 31e:	21 97       	sbiw	r28, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <lcd_init+0x74>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 322:	88 e2       	ldi	r24, 0x28	; 40
 324:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
    
	
	//lcd_clrscr();                           /* display clear                */ 
	lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
	lcd_command(dispAttr);                  /* display/cursor control       */
 334:	81 2f       	mov	r24, r17
 336:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>

}/* lcd_init */
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	08 95       	ret

00000342 <adc_referencia>:
void adc_canal(uint8_t canal);
uint16_t  adc_start();
	

void adc_referencia(uint8_t referencia) {
	switch(referencia) {
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	51 f0       	breq	.+20     	; 0x35a <adc_referencia+0x18>
 346:	18 f0       	brcs	.+6      	; 0x34e <adc_referencia+0xc>
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	81 f0       	breq	.+32     	; 0x36c <adc_referencia+0x2a>
 34c:	08 95       	ret
	case 0:
	ADMUX &=~ ((1<<REFS1) | (1<<REFS0));
 34e:	ec e7       	ldi	r30, 0x7C	; 124
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	8f 73       	andi	r24, 0x3F	; 63
 356:	80 83       	st	Z, r24
	break;
 358:	08 95       	ret
	
	case 1:
	ADMUX &=~ (1<<REFS1); 
 35a:	ec e7       	ldi	r30, 0x7C	; 124
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	8f 77       	andi	r24, 0x7F	; 127
 362:	80 83       	st	Z, r24
	ADMUX |=  (1<<REFS0);
 364:	80 81       	ld	r24, Z
 366:	80 64       	ori	r24, 0x40	; 64
 368:	80 83       	st	Z, r24
	break;
 36a:	08 95       	ret
	
	case 2:
	ADMUX |= ((1<<REFS1) | (1<<REFS0)); 
 36c:	ec e7       	ldi	r30, 0x7C	; 124
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 6c       	ori	r24, 0xC0	; 192
 374:	80 83       	st	Z, r24
 376:	08 95       	ret

00000378 <adc_iniciar>:
	}
	}
	

void adc_iniciar() {
	ADCSRA |=  (1<<ADEN);
 378:	ea e7       	ldi	r30, 0x7A	; 122
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	80 68       	ori	r24, 0x80	; 128
 380:	80 83       	st	Z, r24
	ADCSRA &=~ (1<<ADLAR);
 382:	80 81       	ld	r24, Z
 384:	8f 7d       	andi	r24, 0xDF	; 223
 386:	80 83       	st	Z, r24
	ADCSRA &=~ (1<<ADATE);
 388:	80 81       	ld	r24, Z
 38a:	8f 7d       	andi	r24, 0xDF	; 223
 38c:	80 83       	st	Z, r24
	if(F_CPU == 1000000UL) {
		ADCSRA |=  ((1<<ADPS1) | (1<<ADPS0));
		ADCSRA &=~ (1<<ADPS2);
	}
	else if(F_CPU == 4000000UL) { 
		ADCSRA |=  ((1<<ADPS2) | (1<<ADPS0));
 38e:	80 81       	ld	r24, Z
 390:	85 60       	ori	r24, 0x05	; 5
 392:	80 83       	st	Z, r24
		ADCSRA &=~ (1<<ADPS1);
 394:	80 81       	ld	r24, Z
 396:	8d 7f       	andi	r24, 0xFD	; 253
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <adc_canal>:
	}
} 	


void adc_canal(uint8_t canal) {
	switch(canal) {
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	d9 f0       	breq	.+54     	; 0x3d6 <adc_canal+0x3a>
 3a0:	28 f4       	brcc	.+10     	; 0x3ac <adc_canal+0x10>
 3a2:	88 23       	and	r24, r24
 3a4:	49 f0       	breq	.+18     	; 0x3b8 <adc_canal+0x1c>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	69 f0       	breq	.+26     	; 0x3c4 <adc_canal+0x28>
 3aa:	08 95       	ret
 3ac:	84 30       	cpi	r24, 0x04	; 4
 3ae:	29 f1       	breq	.+74     	; 0x3fa <adc_canal+0x5e>
 3b0:	d8 f0       	brcs	.+54     	; 0x3e8 <adc_canal+0x4c>
 3b2:	85 30       	cpi	r24, 0x05	; 5
 3b4:	59 f1       	breq	.+86     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3b6:	08 95       	ret
	case 0:
	ADMUX &=~ ((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0));
 3b8:	ec e7       	ldi	r30, 0x7C	; 124
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	80 83       	st	Z, r24
	break;	
 3c2:	08 95       	ret
	
	case 1:
	ADMUX &=~ ((1<<MUX3) | (1<<MUX2) | (1<<MUX1));
 3c4:	ec e7       	ldi	r30, 0x7C	; 124
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	81 7f       	andi	r24, 0xF1	; 241
 3cc:	80 83       	st	Z, r24
	ADMUX |=  (1<<MUX0);
 3ce:	80 81       	ld	r24, Z
 3d0:	81 60       	ori	r24, 0x01	; 1
 3d2:	80 83       	st	Z, r24
	break;
 3d4:	08 95       	ret
	
	case 2:
	ADMUX &=~ ((1<<MUX3) | (1<<MUX2) | (1<<MUX0));
 3d6:	ec e7       	ldi	r30, 0x7C	; 124
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	82 7f       	andi	r24, 0xF2	; 242
 3de:	80 83       	st	Z, r24
	ADMUX |=  (1<<MUX1);
 3e0:	80 81       	ld	r24, Z
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	80 83       	st	Z, r24
	break;
 3e6:	08 95       	ret
	
	case 3:
	ADMUX &=~ ((1<<MUX3) | (1<<MUX2));
 3e8:	ec e7       	ldi	r30, 0x7C	; 124
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	83 7f       	andi	r24, 0xF3	; 243
 3f0:	80 83       	st	Z, r24
	ADMUX |=  ((1<<MUX1) | (1<<MUX0));
 3f2:	80 81       	ld	r24, Z
 3f4:	83 60       	ori	r24, 0x03	; 3
 3f6:	80 83       	st	Z, r24
	break;
 3f8:	08 95       	ret
	
	case 4:
	ADMUX &=~ ((1<<MUX3) | (1<<MUX1) | (1<<MUX0));
 3fa:	ec e7       	ldi	r30, 0x7C	; 124
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	84 7f       	andi	r24, 0xF4	; 244
 402:	80 83       	st	Z, r24
	ADMUX |=  (1<<MUX2);
 404:	80 81       	ld	r24, Z
 406:	84 60       	ori	r24, 0x04	; 4
 408:	80 83       	st	Z, r24
	break;
 40a:	08 95       	ret
	
	case 5:
	ADMUX &=~ ((1<<MUX3) | (1<<MUX1));
 40c:	ec e7       	ldi	r30, 0x7C	; 124
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	85 7f       	andi	r24, 0xF5	; 245
 414:	80 83       	st	Z, r24
	ADMUX |=  ((1<<MUX2) | (1<<MUX0));
 416:	80 81       	ld	r24, Z
 418:	85 60       	ori	r24, 0x05	; 5
 41a:	80 83       	st	Z, r24
 41c:	08 95       	ret

0000041e <adc_start>:
	}
}


uint16_t adc_start() {
	ADCSRA |= (1<<ADSC);
 41e:	ea e7       	ldi	r30, 0x7A	; 122
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	80 64       	ori	r24, 0x40	; 64
 426:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
 428:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 42c:	86 fd       	sbrc	r24, 6
 42e:	fc cf       	rjmp	.-8      	; 0x428 <adc_start+0xa>
	return ADCW;
 430:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 434:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 438:	08 95       	ret

0000043a <main>:



int main(void)
{
	DDRD = 0x00000000;
 43a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00000000;
 43c:	1b b8       	out	0x0b, r1	; 11
	
	adc_referencia(1);
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 a1 01 	call	0x342	; 0x342 <adc_referencia>
	
	
	adc_iniciar();
 444:	0e 94 bc 01 	call	0x378	; 0x378 <adc_iniciar>
	
	
    lcd_init(LCD_DISP_ON);
 448:	8c e0       	ldi	r24, 0x0C	; 12
 44a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_init>
	lcd_clrscr();
 44e:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clrscr>
    while (1) 
    {
		adc_canal(0);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 ce 01 	call	0x39c	; 0x39c <adc_canal>
		int aux=0;
		for(int i=0;i<10;i++){
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	07 c0       	rjmp	.+14     	; 0x46c <main+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45e:	e7 e8       	ldi	r30, 0x87	; 135
 460:	f3 e1       	ldi	r31, 0x13	; 19
 462:	31 97       	sbiw	r30, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <main+0x28>
 466:	00 c0       	rjmp	.+0      	; 0x468 <main+0x2e>
 468:	00 00       	nop
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	8a 30       	cpi	r24, 0x0A	; 10
 46e:	91 05       	cpc	r25, r1
 470:	b4 f3       	brlt	.-20     	; 0x45e <main+0x24>
			aux=aux + (PINC0 * 5.0/1023.0);
			_delay_ms(5);
		}
		Vout=aux/10.0;
 472:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <Vout>
 476:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <Vout+0x1>
 47a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <Vout+0x2>
 47e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <Vout+0x3>

		P= Vout/Vs/0.009 - 0.04;
 482:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 486:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 48a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 48e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	cb 01       	movw	r24, r22
 498:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__divsf3>
 49c:	2c eb       	ldi	r18, 0xBC	; 188
 49e:	34 e7       	ldi	r19, 0x74	; 116
 4a0:	43 e1       	ldi	r20, 0x13	; 19
 4a2:	5c e3       	ldi	r21, 0x3C	; 60
 4a4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__divsf3>
 4a8:	2a e0       	ldi	r18, 0x0A	; 10
 4aa:	37 ed       	ldi	r19, 0xD7	; 215
 4ac:	43 e2       	ldi	r20, 0x23	; 35
 4ae:	5d e3       	ldi	r21, 0x3D	; 61
 4b0:	0e 94 92 02 	call	0x524	; 0x524 <__subsf3>
 4b4:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <P>
 4b8:	70 93 28 01 	sts	0x0128, r23	; 0x800128 <P+0x1>
 4bc:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <P+0x2>
 4c0:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <P+0x3>
		
		sensor = adc_start();
 4c4:	0e 94 0f 02 	call	0x41e	; 0x41e <adc_start>
 4c8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 4cc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
		
	
		lcd_gotoxy(0,0);
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 23 01 	call	0x246	; 0x246 <lcd_gotoxy>
		lcd_puts("Presion= ");
 4d8:	84 e0       	ldi	r24, 0x04	; 4
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_puts>
		
		lcd_gotoxy(9,0);
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	89 e0       	ldi	r24, 0x09	; 9
 4e4:	0e 94 23 01 	call	0x246	; 0x246 <lcd_gotoxy>
		lcd_data(P);
 4e8:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <P>
 4ec:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <P+0x1>
 4f0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <P+0x2>
 4f4:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <P+0x3>
 4f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__fixunssfsi>
 4fc:	86 2f       	mov	r24, r22
 4fe:	0e 94 19 01 	call	0x232	; 0x232 <lcd_data>
		
		lcd_gotoxy(12,0);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	8c e0       	ldi	r24, 0x0C	; 12
 506:	0e 94 23 01 	call	0x246	; 0x246 <lcd_gotoxy>
		lcd_puts("kPa");
 50a:	8e e0       	ldi	r24, 0x0E	; 14
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_puts>
		
		lcd_gotoxy(0,5);
 512:	65 e0       	ldi	r22, 0x05	; 5
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0e 94 23 01 	call	0x246	; 0x246 <lcd_gotoxy>
		lcd_puts("Altura= ");
 51a:	82 e1       	ldi	r24, 0x12	; 18
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_puts>
		
		
    }
 522:	97 cf       	rjmp	.-210    	; 0x452 <main+0x18>

00000524 <__subsf3>:
 524:	50 58       	subi	r21, 0x80	; 128

00000526 <__addsf3>:
 526:	bb 27       	eor	r27, r27
 528:	aa 27       	eor	r26, r26
 52a:	0e 94 aa 02 	call	0x554	; 0x554 <__addsf3x>
 52e:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_round>
 532:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_pscA>
 536:	38 f0       	brcs	.+14     	; 0x546 <__addsf3+0x20>
 538:	0e 94 b0 03 	call	0x760	; 0x760 <__fp_pscB>
 53c:	20 f0       	brcs	.+8      	; 0x546 <__addsf3+0x20>
 53e:	39 f4       	brne	.+14     	; 0x54e <__addsf3+0x28>
 540:	9f 3f       	cpi	r25, 0xFF	; 255
 542:	19 f4       	brne	.+6      	; 0x54a <__addsf3+0x24>
 544:	26 f4       	brtc	.+8      	; 0x54e <__addsf3+0x28>
 546:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_nan>
 54a:	0e f4       	brtc	.+2      	; 0x54e <__addsf3+0x28>
 54c:	e0 95       	com	r30
 54e:	e7 fb       	bst	r30, 7
 550:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_inf>

00000554 <__addsf3x>:
 554:	e9 2f       	mov	r30, r25
 556:	0e 94 c8 03 	call	0x790	; 0x790 <__fp_split3>
 55a:	58 f3       	brcs	.-42     	; 0x532 <__addsf3+0xc>
 55c:	ba 17       	cp	r27, r26
 55e:	62 07       	cpc	r22, r18
 560:	73 07       	cpc	r23, r19
 562:	84 07       	cpc	r24, r20
 564:	95 07       	cpc	r25, r21
 566:	20 f0       	brcs	.+8      	; 0x570 <__addsf3x+0x1c>
 568:	79 f4       	brne	.+30     	; 0x588 <__addsf3x+0x34>
 56a:	a6 f5       	brtc	.+104    	; 0x5d4 <__addsf3x+0x80>
 56c:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_zero>
 570:	0e f4       	brtc	.+2      	; 0x574 <__addsf3x+0x20>
 572:	e0 95       	com	r30
 574:	0b 2e       	mov	r0, r27
 576:	ba 2f       	mov	r27, r26
 578:	a0 2d       	mov	r26, r0
 57a:	0b 01       	movw	r0, r22
 57c:	b9 01       	movw	r22, r18
 57e:	90 01       	movw	r18, r0
 580:	0c 01       	movw	r0, r24
 582:	ca 01       	movw	r24, r20
 584:	a0 01       	movw	r20, r0
 586:	11 24       	eor	r1, r1
 588:	ff 27       	eor	r31, r31
 58a:	59 1b       	sub	r21, r25
 58c:	99 f0       	breq	.+38     	; 0x5b4 <__addsf3x+0x60>
 58e:	59 3f       	cpi	r21, 0xF9	; 249
 590:	50 f4       	brcc	.+20     	; 0x5a6 <__addsf3x+0x52>
 592:	50 3e       	cpi	r21, 0xE0	; 224
 594:	68 f1       	brcs	.+90     	; 0x5f0 <__addsf3x+0x9c>
 596:	1a 16       	cp	r1, r26
 598:	f0 40       	sbci	r31, 0x00	; 0
 59a:	a2 2f       	mov	r26, r18
 59c:	23 2f       	mov	r18, r19
 59e:	34 2f       	mov	r19, r20
 5a0:	44 27       	eor	r20, r20
 5a2:	58 5f       	subi	r21, 0xF8	; 248
 5a4:	f3 cf       	rjmp	.-26     	; 0x58c <__addsf3x+0x38>
 5a6:	46 95       	lsr	r20
 5a8:	37 95       	ror	r19
 5aa:	27 95       	ror	r18
 5ac:	a7 95       	ror	r26
 5ae:	f0 40       	sbci	r31, 0x00	; 0
 5b0:	53 95       	inc	r21
 5b2:	c9 f7       	brne	.-14     	; 0x5a6 <__addsf3x+0x52>
 5b4:	7e f4       	brtc	.+30     	; 0x5d4 <__addsf3x+0x80>
 5b6:	1f 16       	cp	r1, r31
 5b8:	ba 0b       	sbc	r27, r26
 5ba:	62 0b       	sbc	r22, r18
 5bc:	73 0b       	sbc	r23, r19
 5be:	84 0b       	sbc	r24, r20
 5c0:	ba f0       	brmi	.+46     	; 0x5f0 <__addsf3x+0x9c>
 5c2:	91 50       	subi	r25, 0x01	; 1
 5c4:	a1 f0       	breq	.+40     	; 0x5ee <__addsf3x+0x9a>
 5c6:	ff 0f       	add	r31, r31
 5c8:	bb 1f       	adc	r27, r27
 5ca:	66 1f       	adc	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	88 1f       	adc	r24, r24
 5d0:	c2 f7       	brpl	.-16     	; 0x5c2 <__addsf3x+0x6e>
 5d2:	0e c0       	rjmp	.+28     	; 0x5f0 <__addsf3x+0x9c>
 5d4:	ba 0f       	add	r27, r26
 5d6:	62 1f       	adc	r22, r18
 5d8:	73 1f       	adc	r23, r19
 5da:	84 1f       	adc	r24, r20
 5dc:	48 f4       	brcc	.+18     	; 0x5f0 <__addsf3x+0x9c>
 5de:	87 95       	ror	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b7 95       	ror	r27
 5e6:	f7 95       	ror	r31
 5e8:	9e 3f       	cpi	r25, 0xFE	; 254
 5ea:	08 f0       	brcs	.+2      	; 0x5ee <__addsf3x+0x9a>
 5ec:	b0 cf       	rjmp	.-160    	; 0x54e <__addsf3+0x28>
 5ee:	93 95       	inc	r25
 5f0:	88 0f       	add	r24, r24
 5f2:	08 f0       	brcs	.+2      	; 0x5f6 <__addsf3x+0xa2>
 5f4:	99 27       	eor	r25, r25
 5f6:	ee 0f       	add	r30, r30
 5f8:	97 95       	ror	r25
 5fa:	87 95       	ror	r24
 5fc:	08 95       	ret

000005fe <__divsf3>:
 5fe:	0e 94 13 03 	call	0x626	; 0x626 <__divsf3x>
 602:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_round>
 606:	0e 94 b0 03 	call	0x760	; 0x760 <__fp_pscB>
 60a:	58 f0       	brcs	.+22     	; 0x622 <__divsf3+0x24>
 60c:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_pscA>
 610:	40 f0       	brcs	.+16     	; 0x622 <__divsf3+0x24>
 612:	29 f4       	brne	.+10     	; 0x61e <__divsf3+0x20>
 614:	5f 3f       	cpi	r21, 0xFF	; 255
 616:	29 f0       	breq	.+10     	; 0x622 <__divsf3+0x24>
 618:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_inf>
 61c:	51 11       	cpse	r21, r1
 61e:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_szero>
 622:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_nan>

00000626 <__divsf3x>:
 626:	0e 94 c8 03 	call	0x790	; 0x790 <__fp_split3>
 62a:	68 f3       	brcs	.-38     	; 0x606 <__divsf3+0x8>

0000062c <__divsf3_pse>:
 62c:	99 23       	and	r25, r25
 62e:	b1 f3       	breq	.-20     	; 0x61c <__divsf3+0x1e>
 630:	55 23       	and	r21, r21
 632:	91 f3       	breq	.-28     	; 0x618 <__divsf3+0x1a>
 634:	95 1b       	sub	r25, r21
 636:	55 0b       	sbc	r21, r21
 638:	bb 27       	eor	r27, r27
 63a:	aa 27       	eor	r26, r26
 63c:	62 17       	cp	r22, r18
 63e:	73 07       	cpc	r23, r19
 640:	84 07       	cpc	r24, r20
 642:	38 f0       	brcs	.+14     	; 0x652 <__divsf3_pse+0x26>
 644:	9f 5f       	subi	r25, 0xFF	; 255
 646:	5f 4f       	sbci	r21, 0xFF	; 255
 648:	22 0f       	add	r18, r18
 64a:	33 1f       	adc	r19, r19
 64c:	44 1f       	adc	r20, r20
 64e:	aa 1f       	adc	r26, r26
 650:	a9 f3       	breq	.-22     	; 0x63c <__divsf3_pse+0x10>
 652:	35 d0       	rcall	.+106    	; 0x6be <__divsf3_pse+0x92>
 654:	0e 2e       	mov	r0, r30
 656:	3a f0       	brmi	.+14     	; 0x666 <__divsf3_pse+0x3a>
 658:	e0 e8       	ldi	r30, 0x80	; 128
 65a:	32 d0       	rcall	.+100    	; 0x6c0 <__divsf3_pse+0x94>
 65c:	91 50       	subi	r25, 0x01	; 1
 65e:	50 40       	sbci	r21, 0x00	; 0
 660:	e6 95       	lsr	r30
 662:	00 1c       	adc	r0, r0
 664:	ca f7       	brpl	.-14     	; 0x658 <__divsf3_pse+0x2c>
 666:	2b d0       	rcall	.+86     	; 0x6be <__divsf3_pse+0x92>
 668:	fe 2f       	mov	r31, r30
 66a:	29 d0       	rcall	.+82     	; 0x6be <__divsf3_pse+0x92>
 66c:	66 0f       	add	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	88 1f       	adc	r24, r24
 672:	bb 1f       	adc	r27, r27
 674:	26 17       	cp	r18, r22
 676:	37 07       	cpc	r19, r23
 678:	48 07       	cpc	r20, r24
 67a:	ab 07       	cpc	r26, r27
 67c:	b0 e8       	ldi	r27, 0x80	; 128
 67e:	09 f0       	breq	.+2      	; 0x682 <__divsf3_pse+0x56>
 680:	bb 0b       	sbc	r27, r27
 682:	80 2d       	mov	r24, r0
 684:	bf 01       	movw	r22, r30
 686:	ff 27       	eor	r31, r31
 688:	93 58       	subi	r25, 0x83	; 131
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	3a f0       	brmi	.+14     	; 0x69c <__divsf3_pse+0x70>
 68e:	9e 3f       	cpi	r25, 0xFE	; 254
 690:	51 05       	cpc	r21, r1
 692:	78 f0       	brcs	.+30     	; 0x6b2 <__divsf3_pse+0x86>
 694:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_inf>
 698:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_szero>
 69c:	5f 3f       	cpi	r21, 0xFF	; 255
 69e:	e4 f3       	brlt	.-8      	; 0x698 <__divsf3_pse+0x6c>
 6a0:	98 3e       	cpi	r25, 0xE8	; 232
 6a2:	d4 f3       	brlt	.-12     	; 0x698 <__divsf3_pse+0x6c>
 6a4:	86 95       	lsr	r24
 6a6:	77 95       	ror	r23
 6a8:	67 95       	ror	r22
 6aa:	b7 95       	ror	r27
 6ac:	f7 95       	ror	r31
 6ae:	9f 5f       	subi	r25, 0xFF	; 255
 6b0:	c9 f7       	brne	.-14     	; 0x6a4 <__divsf3_pse+0x78>
 6b2:	88 0f       	add	r24, r24
 6b4:	91 1d       	adc	r25, r1
 6b6:	96 95       	lsr	r25
 6b8:	87 95       	ror	r24
 6ba:	97 f9       	bld	r25, 7
 6bc:	08 95       	ret
 6be:	e1 e0       	ldi	r30, 0x01	; 1
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	bb 1f       	adc	r27, r27
 6c8:	62 17       	cp	r22, r18
 6ca:	73 07       	cpc	r23, r19
 6cc:	84 07       	cpc	r24, r20
 6ce:	ba 07       	cpc	r27, r26
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__divsf3_pse+0xae>
 6d2:	62 1b       	sub	r22, r18
 6d4:	73 0b       	sbc	r23, r19
 6d6:	84 0b       	sbc	r24, r20
 6d8:	ba 0b       	sbc	r27, r26
 6da:	ee 1f       	adc	r30, r30
 6dc:	88 f7       	brcc	.-30     	; 0x6c0 <__divsf3_pse+0x94>
 6de:	e0 95       	com	r30
 6e0:	08 95       	ret

000006e2 <__fixunssfsi>:
 6e2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fp_splitA>
 6e6:	88 f0       	brcs	.+34     	; 0x70a <__fixunssfsi+0x28>
 6e8:	9f 57       	subi	r25, 0x7F	; 127
 6ea:	98 f0       	brcs	.+38     	; 0x712 <__fixunssfsi+0x30>
 6ec:	b9 2f       	mov	r27, r25
 6ee:	99 27       	eor	r25, r25
 6f0:	b7 51       	subi	r27, 0x17	; 23
 6f2:	b0 f0       	brcs	.+44     	; 0x720 <__fixunssfsi+0x3e>
 6f4:	e1 f0       	breq	.+56     	; 0x72e <__fixunssfsi+0x4c>
 6f6:	66 0f       	add	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	1a f0       	brmi	.+6      	; 0x706 <__fixunssfsi+0x24>
 700:	ba 95       	dec	r27
 702:	c9 f7       	brne	.-14     	; 0x6f6 <__fixunssfsi+0x14>
 704:	14 c0       	rjmp	.+40     	; 0x72e <__fixunssfsi+0x4c>
 706:	b1 30       	cpi	r27, 0x01	; 1
 708:	91 f0       	breq	.+36     	; 0x72e <__fixunssfsi+0x4c>
 70a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__fp_zero>
 70e:	b1 e0       	ldi	r27, 0x01	; 1
 710:	08 95       	ret
 712:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_zero>
 716:	67 2f       	mov	r22, r23
 718:	78 2f       	mov	r23, r24
 71a:	88 27       	eor	r24, r24
 71c:	b8 5f       	subi	r27, 0xF8	; 248
 71e:	39 f0       	breq	.+14     	; 0x72e <__fixunssfsi+0x4c>
 720:	b9 3f       	cpi	r27, 0xF9	; 249
 722:	cc f3       	brlt	.-14     	; 0x716 <__fixunssfsi+0x34>
 724:	86 95       	lsr	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	b3 95       	inc	r27
 72c:	d9 f7       	brne	.-10     	; 0x724 <__fixunssfsi+0x42>
 72e:	3e f4       	brtc	.+14     	; 0x73e <__fixunssfsi+0x5c>
 730:	90 95       	com	r25
 732:	80 95       	com	r24
 734:	70 95       	com	r23
 736:	61 95       	neg	r22
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	8f 4f       	sbci	r24, 0xFF	; 255
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	08 95       	ret

00000740 <__fp_inf>:
 740:	97 f9       	bld	r25, 7
 742:	9f 67       	ori	r25, 0x7F	; 127
 744:	80 e8       	ldi	r24, 0x80	; 128
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	08 95       	ret

0000074c <__fp_nan>:
 74c:	9f ef       	ldi	r25, 0xFF	; 255
 74e:	80 ec       	ldi	r24, 0xC0	; 192
 750:	08 95       	ret

00000752 <__fp_pscA>:
 752:	00 24       	eor	r0, r0
 754:	0a 94       	dec	r0
 756:	16 16       	cp	r1, r22
 758:	17 06       	cpc	r1, r23
 75a:	18 06       	cpc	r1, r24
 75c:	09 06       	cpc	r0, r25
 75e:	08 95       	ret

00000760 <__fp_pscB>:
 760:	00 24       	eor	r0, r0
 762:	0a 94       	dec	r0
 764:	12 16       	cp	r1, r18
 766:	13 06       	cpc	r1, r19
 768:	14 06       	cpc	r1, r20
 76a:	05 06       	cpc	r0, r21
 76c:	08 95       	ret

0000076e <__fp_round>:
 76e:	09 2e       	mov	r0, r25
 770:	03 94       	inc	r0
 772:	00 0c       	add	r0, r0
 774:	11 f4       	brne	.+4      	; 0x77a <__fp_round+0xc>
 776:	88 23       	and	r24, r24
 778:	52 f0       	brmi	.+20     	; 0x78e <__fp_round+0x20>
 77a:	bb 0f       	add	r27, r27
 77c:	40 f4       	brcc	.+16     	; 0x78e <__fp_round+0x20>
 77e:	bf 2b       	or	r27, r31
 780:	11 f4       	brne	.+4      	; 0x786 <__fp_round+0x18>
 782:	60 ff       	sbrs	r22, 0
 784:	04 c0       	rjmp	.+8      	; 0x78e <__fp_round+0x20>
 786:	6f 5f       	subi	r22, 0xFF	; 255
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	8f 4f       	sbci	r24, 0xFF	; 255
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	08 95       	ret

00000790 <__fp_split3>:
 790:	57 fd       	sbrc	r21, 7
 792:	90 58       	subi	r25, 0x80	; 128
 794:	44 0f       	add	r20, r20
 796:	55 1f       	adc	r21, r21
 798:	59 f0       	breq	.+22     	; 0x7b0 <__fp_splitA+0x10>
 79a:	5f 3f       	cpi	r21, 0xFF	; 255
 79c:	71 f0       	breq	.+28     	; 0x7ba <__fp_splitA+0x1a>
 79e:	47 95       	ror	r20

000007a0 <__fp_splitA>:
 7a0:	88 0f       	add	r24, r24
 7a2:	97 fb       	bst	r25, 7
 7a4:	99 1f       	adc	r25, r25
 7a6:	61 f0       	breq	.+24     	; 0x7c0 <__fp_splitA+0x20>
 7a8:	9f 3f       	cpi	r25, 0xFF	; 255
 7aa:	79 f0       	breq	.+30     	; 0x7ca <__fp_splitA+0x2a>
 7ac:	87 95       	ror	r24
 7ae:	08 95       	ret
 7b0:	12 16       	cp	r1, r18
 7b2:	13 06       	cpc	r1, r19
 7b4:	14 06       	cpc	r1, r20
 7b6:	55 1f       	adc	r21, r21
 7b8:	f2 cf       	rjmp	.-28     	; 0x79e <__fp_split3+0xe>
 7ba:	46 95       	lsr	r20
 7bc:	f1 df       	rcall	.-30     	; 0x7a0 <__fp_splitA>
 7be:	08 c0       	rjmp	.+16     	; 0x7d0 <__fp_splitA+0x30>
 7c0:	16 16       	cp	r1, r22
 7c2:	17 06       	cpc	r1, r23
 7c4:	18 06       	cpc	r1, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	f1 cf       	rjmp	.-30     	; 0x7ac <__fp_splitA+0xc>
 7ca:	86 95       	lsr	r24
 7cc:	71 05       	cpc	r23, r1
 7ce:	61 05       	cpc	r22, r1
 7d0:	08 94       	sec
 7d2:	08 95       	ret

000007d4 <__fp_zero>:
 7d4:	e8 94       	clt

000007d6 <__fp_szero>:
 7d6:	bb 27       	eor	r27, r27
 7d8:	66 27       	eor	r22, r22
 7da:	77 27       	eor	r23, r23
 7dc:	cb 01       	movw	r24, r22
 7de:	97 f9       	bld	r25, 7
 7e0:	08 95       	ret

000007e2 <_exit>:
 7e2:	f8 94       	cli

000007e4 <__stop_program>:
 7e4:	ff cf       	rjmp	.-2      	; 0x7e4 <__stop_program>
